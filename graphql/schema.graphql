"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    hello: String!
    greet(name: String = "you"): String
    user(id: ID @eq): User @find
    users: [User!]! @paginate(defaultCount: 10)
    post(id: Int! @eq): Post @find
    posts: [Post!]! @all
    categories: [PostCategory!]! @all
    category(id: Int! @eq): PostCategory @find
    tags: [PostTag!]! @all
    tag(id: Int! @eq): PostTag @find
    quote: String!
    project(id: Int! @eq): Project! @find
    aboutMe: [AboutMe!]! @all
    quotes: [Quote!]! @all
    parking: [Parking!]!
}

extend type Query @guard {
    projects: [Project!]! @all(scopes: ["undone"])
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
    projects: [Project!]! @hasMany
}

type Post {
    id: ID!
    title: String!
    content: String!
    user: User! @belongsTo
    category: PostCategory @hasOne
    tags: [PostTag]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type PostCategory {
    id: ID!
    name: String!
    post: Post! @belongsTo
}

type PostTag {
    id: ID!
    name: String
    post: Post! @belongsTo
}

type Project {
    id: ID!
    name: String!
    description: String
    is_completed: Boolean!
    user: User! @belongsTo
    tasks: [Tasks]! @hasMany(scopes: ["undone"]) @orderBy(column: "order", direction: DESC)
    taskCount: Int! @count(relation: "tasks", scopes: ["undone"])
}

type Tasks {
    id: ID!
    title: String!
    is_completed: Boolean!
    priority: Int!
    order: Int!
    project: Project! @belongsTo
}

type Mutation {
    createUser(name: String!, email: String!): User! @create
}

type AboutMe {
    id: ID!
    category: String!
    content: String!
}

type Quote {
    content: String!
}

type Parking {
    id:ID!
    status: Boolean!
}
